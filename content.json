{"meta":{"title":"FLDPMpang的个人博客","subtitle":"一个奇怪的人的学习日记","description":null,"author":"FLDPMpang","url":"https://www.fldpmpang.website","root":"/"},"pages":[{"title":"","date":"2021-05-06T10:05:23.048Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"404.html","permalink":"https://www.fldpmpang.website/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2021-05-06T10:05:23.048Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"about/index.html","permalink":"https://www.fldpmpang.website/about/index.html","excerpt":"","text":"某双非 EE 学生 Language : 汉语,漢語,English Major: Electrical Engineering Broswers: Vivaldi, Firefox Developer Edition Editors: Neovim, VSCode Platforms: Archlinux(i3wm), windows10 , MIUI"},{"title":"所有分类","date":"2021-05-06T10:05:23.048Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"categories/index.html","permalink":"https://www.fldpmpang.website/categories/index.html","excerpt":"","text":""},{"title":"我的朋友","date":"2021-05-06T10:05:23.048Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"friends/index.html","permalink":"https://www.fldpmpang.website/friends/index.html","excerpt":"","text":"欢迎交换友链!可在下方留言板申请友链。 123456名称: FLDPMpang 的个人博客网址: https:&#x2F;&#x2F;www.fldpmpang.website&#x2F;简介: 都不知道该干什么头像: https:&#x2F;&#x2F;gitee.com&#x2F;fldpmpang&#x2F;fldpmpangs-graph&#x2F;raw&#x2F;master&#x2F;img&#x2F;%E8%8D%89%E8%8E%93%E5%B9%B2.png"},{"title":"所有标签","date":"2021-05-06T10:05:23.051Z","updated":"2021-05-06T10:05:23.051Z","comments":true,"path":"tags/index.html","permalink":"https://www.fldpmpang.website/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-05-06T10:05:23.048Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"js/duration.js","permalink":"https://www.fldpmpang.website/js/duration.js","excerpt":"","text":"!(function() { function update() { var now = new Date(); var grt = new Date(\"2020-09-09 00:00:00\"); /** 此处是计时的起始时间 **/ now.setTime(now.getTime()+250); days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\"; } setInterval(update, 1000); })();"}],"posts":[{"title":"全网中文最详细的在Linux上安装配置XilinxVivado及开发","slug":"Vivado","date":"2021-05-14T03:20:38.000Z","updated":"2021-05-14T04:50:55.019Z","comments":true,"path":"20210514174ea3a8/","link":"","permalink":"https://www.fldpmpang.website/20210514174ea3a8/","excerpt":"","text":"可能有人觉得有点标题党,但是我翻看一下全网还真没有把安装过程和原因写的特别清楚的只重点些某些方面,而且大多都是在 CSDN 上,也不一定使用 markdown,阅读效果很不好. 最近我重新写了 ArchWiki 的XilinxVivado部分,那个写的比较正经. 废话不多说了 测试平台为 Archlinux(内核版本 5.12) 桌面 Gnome40/i3wm 下载由于 vivado 安装程序需要登陆后提交个人信息才能下载，无法使用包管理安装(不过有些包管理器可以进行管理) 打开官方下载中心下载Vivado Design Suite - HLx相对应的版本 使用官方支持系统CentOS,Ubuntu,OenpSUSE,Red Hat相对应的版本,下载Linux Self Extracting Web Installer版本. 其他 Linux 发行版使用All OS installer Single-File Download版本(不建议使用不支持的 linux 安装) 安装依赖安装程序依赖 ncurses5库(不能使用 ncurses6),请使用相对应的包管理器安装(ubuntu 下包名为 libncurses5) Vivado SDK 需要gtk2库, Vitis 需要安装xorg-xlsclients 库 arch 系发行版可以使用AUR中的xilinx-vivado-dummy进行替代安装所有这些依赖项 如果你使用平铺式窗口管理器 启动安装程序前加入环境变量 请使用Xorg显示管理器,Vivado 使用的 Java 版本存在兼容性问题 1export _JAVA_AWT_WM_NONREPARENTING=1 Vivado 中默认的字体显示效果差,难以阅读,请提前安装noto-fonts这套字体官网下载地址你的 Linux 软件仓库里应该也有 安装主程序在 安装包目录下 终端下启动安装程序(tar.gz 版需要先解压) 1sudo ./xsetup 随后就启动了熟悉的安装程序 同意协议,选择安装的内容,这些不必多说,到选择安装位置时,建议选择/opt/Xilinx安装套件,本文假定套件装在那里 长时间的等待后,安装完成,Xilinx 许可证页面打开, 懂的都懂 ,导入.lic文件 驱动与额外安装Digilent USB-JTAG 驱动要使用来自 Vivado 的 Digilent Adept USB-JTAG 适配器(例如内置在 ZedBoard 上的 JTAG 适配器)你需要安装 Digilent Adept Runtime Linux cable 驱动以 root 权限在安装目录运行脚本： 1(vivado_install_dir)/data/xicom/cable_drivers/lin64/install_script/install_drivers/install_drivers 用户配置快捷方式配置安装完成后,Vivado 会在 root 用户生成桌面和应用程序菜单快捷方式,但一直使用 root 用户并不安全如果使用其他用户需要应用程序菜单中的快捷方式，则必须将它们从 root 帐户移动到/usr/share桌面快捷方式应该移动到用户桌面 复制应用程序菜单快捷方式: 123sudo mv /root/.local/share/applications/* /usr/share/applications/sudo mv /root/.local/share/desktop-directories/* /usr/share/desktop-directories/sudo mv /root/.config/menus/applications-merged/* /etc/xdg/menus/applications-merged/ 复制桌面快捷方式: 12sudo chown (username) /root/Desktop/*sudo mv /root/Desktop/* /home/(username)/Desktop/ 串口设置若要使用串口 需要将用户添加到uucp组中 1sudo gpasswd -a (username) uucp 在 Linux(windonws 下也可用)我推荐使用的串口调试工具是VOFA+会自动检测串口(而且不止串口通信,功能非常多,还可以安装插件) 当然命令行下还是使用picocom吧 启动屏幕缩放启动 Vivado，然后按照Tools -&gt; Setting -&gt; Display -&gt; Scaling方式启用屏幕缩放功能 这样大概就可以正常开发使用了,有问题可评论区留言","categories":[{"name":"电子电路设计","slug":"电子电路设计","permalink":"https://www.fldpmpang.website/categories/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://www.fldpmpang.website/tags/FPGA/"},{"name":"Vivado","slug":"Vivado","permalink":"https://www.fldpmpang.website/tags/Vivado/"}]},{"title":"archlinux系统安装","slug":"archlinux安装拾遗","date":"2021-03-22T10:05:35.000Z","updated":"2021-05-11T01:59:57.975Z","comments":true,"path":"20210322a4632fd3/","link":"","permalink":"https://www.fldpmpang.website/20210322a4632fd3/","excerpt":"","text":"2020.04.01 版本后出现了新的安装方式,先体验一下5.10 之前一定写完!!!! building….. 前面的话早就想吧自己的 manjaro 换成 archlinux 了，只可惜最近才有时间为什么这么说，因为在主流（或者是大部分人）看来，过度折腾 linux 桌面和一些“生产力工具”是毫无意义的进而说来，过度折腾工具是毫无意义（或收效甚微的） 从我个人观点来看，这些工具是头几年折腾，但却能收益终生的。但国内目前没有干到老的程序员，充斥着“35 岁裁员的气氛”，所以或许也应该这样？ 另一方面，折腾 linux 需要耗费时间和精力，甚至还要花费一些金钱，如果你只是想找一个能用的 liunux 发行版，我建议去用 deepin , openSUSE 等 如果想去使用 archlinux 但缺乏必要知识，我建议先用 manjaro （或者直接留在 manjaro，体验差距并不大） 如果你真有精力和能力去使用 archlinux,那么请继续往下看吧…. 一定要看archwiki建议与本文同步阅读,互为补充 个人电脑为 R7000 2020（锐龙 R5 4600+gtx1650）驱动安装方面我会仔细说明 启动到安装环境像其他 Linux 发行版一样，需要先制作启动 U 盘,国内可在清华大学镜像源选择镜像下图是一个例子 2010 年后的电脑大部分呢都为UEFI引导(在分区类型选择GPT)windows 下使用Rufus , Linux 下使用以下命令 1dd bs&#x3D;4M if&#x3D;&quot;镜像下载位置&quot; of&#x3D;&quot;U盘挂载位置&quot; status&#x3D;progress &amp;&amp; sync 接下来的三步按照 archwiki 走 键盘布局 网络链接(我建议安装时尽量使用网线,终端下无线网络配置较繁琐) 更新系统时间(可忽略) 分区与系统安装硬盘分区使用fdisk -l 查看完分区后,我更推荐使用cfdisk 这个图形化界面进行分区使用 1cfdisk &#x2F;dev&#x2F;nvme..... 命令 进行图形化分区 如果想要正常使用,需要至少准备三个分区 主分区, EFI 引导分区 ,交换分区 主分区 (尽量大一点) 交换分区(大小最好为内存大小或内存两倍大小) EFI 分区(512MB)如果你电脑上存在Windows系统,可以不用再额外分 EFI 分区 驱动安装图形界面安装","categories":[{"name":"Linux","slug":"Linux","permalink":"https://www.fldpmpang.website/categories/Linux/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://www.fldpmpang.website/tags/archlinux/"},{"name":"显卡驱动","slug":"显卡驱动","permalink":"https://www.fldpmpang.website/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"},{"name":"Xorg","slug":"Xorg","permalink":"https://www.fldpmpang.website/tags/Xorg/"}]},{"title":"python与正则表达式","slug":"python与正则表达式","date":"2021-01-05T04:16:47.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"20210105679ce642/","link":"","permalink":"https://www.fldpmpang.website/20210105679ce642/","excerpt":"","text":"正则表达式语法在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式 (regular expression) 就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。 基础语法 [ . . . ] 匹配 [ . . . ] 中的一串字符 [A-Z] , [a-z] , [0-9] 匹配所有对应的大写字母，小写字母，数字 (?#….) 添加注释 转义字符匹配字符本身加 \\ 元字符(metacharacter) 字符 说明 . 匹配除换行符以外的任意字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符(空格,制表,换行) \\d 匹配数字 \\b 匹配单词的开始或结束 \\n 换行符 ^ 匹配字符串的开始和多行模式下的行首 $ 匹配字符串的结束和多行模式下的行未 \\A 只匹配字符串开始 \\Z 只匹配字符串尾 反义: \\W 匹配任意不是字母，数字，下划线，汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意非数字的字符 \\B 匹配不是单词开头或结束的位置 [^xy] 匹配除了 x,y 以外的任意字符 以上元字符可以对某一类型(种类)的字符进行匹配,例如 \\bhello\\b式可以匹配一个单词 hello 0532-\\d\\d\\d\\d\\d\\d\\d\\d 可以匹配一个以 0532 开头的十二位电话号码 限定符限定符可以用于对某一规则匹配多次 有两个新概念 贪婪: (在使整个表达式能得到匹配的前提下)匹配尽可能多的字符 懒惰: 在能使整个匹配成功的前提下使用最少的重复 贪婪限定符 字符 描述 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 &#123;n&#125; 重复 n 次 &#123;n,&#125; 重复 n 次或更多次 &#123;n,m&#125; 重复 n 到 m 次 懒惰限定符 字符 描述 \\*? 重复任意次，但尽可能少重复 +? 重复 1 次或更多次，但尽可能少重复 ?? 重复 0 次或 1 次，但尽可能少重复 &#123;n,m&#125;? 重复 n 到 m 次，但尽可能少重复 &#123;n,&#125;? 重复 n 次以上，但尽可能少重复 例如前面的匹配以 0532 开头的 12 位电话号可以写为 0532-\\d&#123;8&#125; 分支与分组分支| 分隔不同的规则,满足其中任意一种规则即匹配(具有短路性) 分组() 指定子表达式对一个字串进行操作 例如匹配 IP 地址 ((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?) 零宽断言 (?=exp) 零宽度正预测先行断言,它断言自身位置的后面能匹配表达式 (?&lt;=exp) 零宽度正回顾后发断言,它断言自身位置的前面能匹配表达式 (?!exp) 零宽度负预测先行断言，断言此位置的后面不能匹配表达式 (?&lt;!exp) 零宽度负回顾后发断言,断言此位置的前面不能匹配表达式 参考资料正则表达式 30 分钟入门教程 菜鸟教程-正则表达式 python 与正则表达式python re 模块 使 Python (编辑文章时 python 版本为 3.9.1) 语言拥有全部的正则表达式功能. 常用基础函数和方法通用参数说明 参数 说明 pattern 正则表达式(模式串) string 要匹配的字符串 flags 标志位 pos 开始搜索的位置 endpos 结束搜索的位置 flag 标志位 标志位(flag) re.I 不区分大小写 re.M 多行匹配^ 匹配字符串的开始，和每一行的开始.样式字符 $ 匹配字符串尾，和每一行的结尾 re.X 编写更具可读性的正则表达式正则表达式可以分段和添加注释。空白符号会被忽略 单个查找1re.search(pattern, string, flags=0) 匹配整个字符串找到匹配样式的第一个位置，返回匹配对象或 None 1re.match(pattern, string, flags=0) 匹配字符串的开始位置找到匹配样式,返回匹配对象或 None 查找和替换1234re.sub(pattern, repl, string, count=0, flags=0)re.subn(pattern, repl, string, count=0, flags=0)# 与sub行为相同，多返回一个元组 (字符串, 替换次数) repl : 替换的字符串，也可为一个函数。 count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配 查找多项1re.findall(pattern, string, flags=0) 返回一个不重复的的匹配对象列表，从头到尾的顺序返回 1re.split(pattern, string, maxsplit=0, flags=0) 将匹配的子串将字符串分割后返回列表 匹配对象(设匹配对象为 Match) 若未匹配成功，其布尔值为 0 1Match.groups(group1,...) 返回一个或者多个匹配的字符串或由匹配字符串构成的元组 1Match.groups(default=None) 返回所有匹配构成的元组 12Match.start(group)Match.end(group) 返回第 group 个匹配到的字串的开始和结束位置 1Match.span([group]) 返回 (m.start(group), m.end(group)) 若未在这个匹配中返回 (-1, -1) 1Match.string 传递到 match() 或 search()的字符串。 正则表达式对象12345678910111213141516re.compile(&quot;pattern&quot; ,flag)# 编译后的正则表达式，和上述同名函数等价Pattern.search(string[, pos[, endpos]])Pattern.match(string[, pos[, endpos]])Pattern.split(string, maxsplit=0)Pattern.findall(string[, pos[, endpos]])Pattern.sub(repl, string, count=0)# 编译对象的原始样式字符串Pattern.pattern","categories":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"https://www.fldpmpang.website/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.fldpmpang.website/tags/python/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://www.fldpmpang.website/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"FPGA学习笔记(一)-Verilog HDL的基本语法","slug":"Verilog学习笔记","date":"2020-12-15T02:54:36.000Z","updated":"2021-05-14T03:25:19.139Z","comments":true,"path":"20201215742/","link":"","permalink":"https://www.fldpmpang.website/20201215742/","excerpt":"","text":"Verilog HDL 是一种用于数字逻辑电路设计的语言。它与之前学过的高级编程语言大不一样,Verilog HDL 行为描述语言作为一种结构化和过程性的语言 模块结构1234567891011121314151617module //声明模块开始 module_name(input a,input b, output cc...); //模块I/O说明 reg [x:0] R1,R2, ...; wire [x:0] W1,W2, ...; //内部信号说明 assign a=b&amp;c; //声明语句，并行执行 always (....) begin 内部顺序执行 if(clr) ....; else ...; endendmodule 数据类型数字表示10 = 32&#39;d10 = 32&#39;b1010&lt;位宽&gt;&lt;进制(B,O,D,H)&gt;&lt;数字&gt; -1 = -32&#39;d1 = 32&#39;hFFFFFFFF x 代表不定值,z 或?代表高阻值。 &#39;BX = 32&#39;BX = 32&#39;BXXXXXXX…X减号写在数字定义表达式的最前面。 &quot;AB&quot; = 16&#39;B01000001_01000010使用下划线分隔开数的提高可读性 参数parameter e=25, f=29.2; parameter byte_size=8, byte_msb=byte_size-1; 跨模块改变参数时使用defparam命令 变量线网(wire)wire 类型表示硬件单元之间的物理连线，由其连接的器件输出端连续驱动。如果没有驱动元件连接到 wire 型变量，缺省值一般为 “Z”(默认输出信号为 wire 型) 12wire [n-1:0] 数据名1,数据名2,…数据名i;&#x2F;&#x2F;共有i条总线，每条总线位宽为n ( ( n - 1 ) - 0 + 1 ) 寄存器(reg) 寄存器表示是数据储存单元 在”always”块内被赋值的每一个信号都必须定义成 reg 型. 12reg [n-1:0] 数据名1,数据名2,… 数据名i;&#x2F;&#x2F;缺省值为不定值 向量当位宽大于 1 时，wire 或 reg 即可声明为向量的形式 12reg [n-1:0] qwq;wire [0:31] art; 整数与实数12345678integer a; &#x2F;&#x2F;默认为32位real f;initial begin f&#x3D;3.8; a&#x3D;f; &#x2F;&#x2F;a&#x3D;3 截尾end 字符串字符串保存在 reg 类型的变量中，每个字符占用一个字节(8bit) 12reg [0: 25*8-1] str ;assign str &#x3D; &quot;www.fldpmpang.website&quot;; 数组可声明 reg, wire, integer, time, real 及其向量类型的数组 12345integer [5:0] a [7:0];reg [31:0] d_4d [11:0][3:0][3:0][255:0];a[1] &#x3D; 6&#39;d0;d_4d[0][0][0][15:0] &#x3D; 15&#39;d3; 编译指令宏定义12&#96;define DATA 32 #整个编译过程都有用,其他文件也可使用&#96;undef DATA 12345678&#96;ifdef MCU51 parameter DATA_DW &#x3D; 8 ;&#96;elsif WINDOW parameter DATA_DW &#x3D; 64 ;&#96;else parameter DATA_DW &#x3D; 32 ;&#96;endif 编译说明1234&#96;include &quot;xxx.v&quot; #包含到设计文件&#96;timescale 1ns&#x2F;1ps # 时间单位和时间精度,与实际时间相关联 运算符和表达式运算符语法,真值,优先级与 C 语言相同, 算术运算符 +,－,×，/,％ 整数除法结果截取整数,取模符号由被膜数决定 赋值运算符=,&lt;= 关系运算符&gt;,&lt;,&gt;=,&lt;= ==和!= 当位是不定值 x 和高阻值 z,结果为不定值 x === 和!==比较时对位的不定值 x 和高阻值 z 也进行比较 逻辑运算符&amp;&amp;,||,! 条件运算符? : 位运算符~,|,^,&amp;,^~ 不同长数据进行位运算时,将两者按右端对齐.位数少的操作数会在相应的高位用 0 填满 移位运算符&lt;&lt;,&gt;&gt; 移位运算都用 0 来填补移出的空位 拼接运算符&#123; &#125; 还可以用重复法来简化表达式 赋值1234567b&lt;&#x3D;a非阻塞:下一条语句与当前赋值语句同时进行(容易使用旧值)b&#x3D;a阻塞:赋值后再执行下一条语句 连续赋值wire 变量的连续赋值语句都是以 assign 开头 1assign LHS &#x3D; RHS ； # 右值发生变化时左值立即更新 语句语句块加入块名可以 定义局部变量 被块内语句调用 块内变量地址固定 判断语句if-else123456if(expression) do...elif do..else case12345678case (expression) expression1 : do..; expression2 : do..; expression3 : do..; . default : do...;endcase 每一个 case 分项的分支表达式的值互不相同 执行完 case 分项后的语句，则跳出该 case 语句结构，终止 case 语句的执行 casez 不考虑 z 的比较，casex 不考虑 z 和 x 的比较 循环语句无限循环1234foreverbegin ;end 固定次数循环12345repeat (expressions)begin do_somethingend for,while以下的for,while两种循环等价(语法与 C 语言类似) 1234567891011121314pre_do;while(expressions) begin do_something; re_do; endfor (pre_do;expressions;re_do) begin do_something; end 时序控制时延控制","categories":[{"name":"电子电路设计","slug":"电子电路设计","permalink":"https://www.fldpmpang.website/categories/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://www.fldpmpang.website/tags/FPGA/"},{"name":"Verilog","slug":"Verilog","permalink":"https://www.fldpmpang.website/tags/Verilog/"}]},{"title":"2020年冬杂谈","slug":"人生-思索-发展","date":"2020-11-04T13:07:42.000Z","updated":"2021-05-11T01:59:57.975Z","comments":true,"path":"2020110431062/","link":"","permalink":"https://www.fldpmpang.website/2020110431062/","excerpt":"","text":"社会只教你向上，没有人包容你往下。 很多事情不存在最优解，只存在最适合自己的解决方案。 躺平 90 年我们看不懂日本为什么婆媳关系不好；00 年我们也看不懂日本经济泡沫破灭；10 年我们看不懂日本年轻人为什么不结婚；现在我们看不懂日本为什么会有平成废宅。但是仔细想想，这就是我们的未来的镜子。 奋斗逼奋斗逼最大的特色就是爱用自己的观念去评价和衡量别人，并且他们的观念主要就是用来评价别人的，或者说的再确切一点，就是用来蔑视和嘲讽别人的。 奋斗逼内核: 用自己的标准去衡量和判断别人，并且自己的标准主要是用来衡量和判断别人的。 封闭和静态地认为自己认知的就是真理，觉得世界应该以自己认知的方式运行。 人最傻逼的就是不知道自己要走什么路，然后盲目去跟别人攀比，最后别人搭上了自己等的车一溜烟儿走了，你就像个傻逼一样地等在原地不知所措。 安排定律 安排定律：如果大学四年里，你被学校安排得明明白白的，那么毕业后你迟早也会被这个社会安排得明明白白的。 –知乎@弗兰克杨 电池原理 当电池被充满电，第二天马上就会在日常琐碎中消耗干净，而电池本身却没有获得意义和快乐。 –知乎@弗兰克杨","categories":[{"name":"杂感","slug":"杂感","permalink":"https://www.fldpmpang.website/categories/%E6%9D%82%E6%84%9F/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://www.fldpmpang.website/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"python:快速复健指南","slug":"python复健","date":"2020-10-10T03:45:35.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"2020101060541/","link":"","permalink":"https://www.fldpmpang.website/2020101060541/","excerpt":"","text":"好久没用python了,都忘光了从 Python程序设计基础第二章开始,记录已经遗忘和不知道的知识 输入,处理与输出输出选项在print( )中 使用sep=&#39; &#39;改变输出项之间的输出额外内容(默认为一个空格) 使用&#39;end=&#39; &#39;改变输出末尾输出的额外内容(默认为一个’\\n’) 格式输出使用format(str,格式控制字符串) 1234&#x27;d&#x27; &#x27;e&#x27; &#x27;.2E&#x27;&#x27;,f&#x27; &#x27;,.3f&#x27;&#x27;12,.4f&#x27; #右对齐 循环结构生成排列列表 range(起始,最终,步长) 函数混合使用位置参数和关键字参数时,位置参数必须先出现 返回多值1234def f(sb): return sb1,sb2,sb3;wdnmd1,wdnmd2,wdnmd3=f(sb); 额外的库random math定义了 pi 和 e数学函数 os 函数 功能 os.listdir() 列出当前目录下的所有文件和文件夹（包括被隐藏的） os.system() 运行shell命令 os.getcwd() 获取当前路径(中间会自动添上一个路径分隔符) os.walk 遍历目录，返回tuple表，表中每一个tuple包含该层文件文件夹及该层父节点 os.path.dirname() 获取指定目录的父目录路径 os.pardir() 获取当前目录的父目录路径 os.remove() 删除指定文件 os.rename() 重命名 os.rmdir() 删除空文件夹 os.mkdir() 新建文件夹 os.chdir() 改变当前目录到指定目录中 os.rename(path1 ,path2) 重命名文件 os.chmod(path ,mode) 改变文件权限模式 os.access(path ,mode) 检验文件权限模式 文件和异常123file_pr=open(&#x27;file_name&#x27;,mode) #&#x27;r&#x27;,&#x27;w&#x27;,&#x27;a&#x27; 只读,写入,追加file_pr=open(r&#x27;file_address&#x27;,mode) #加r防止被当成&#x27;/&#x27;转义 file_pr为文件对象名 1234567file_pr.write(str);file_pr.close() file_pr.read() #返回一个字符串列表(每行)file_pr.readline() #读一行file_pr.writeline() #写一行str=str.rstrip(&#x27;\\n&#x27;); #删除最后的换行符 异常123456789101112try: do()except SomeError: do()except SomeError as string : #string为错误的默认信息 do()except : #all error do()else: #没出错的工作 do()finally: #最后的清理工作(出没出错都要干) 异常类型 描述 KeyboardInterrupt 用户中断执行(通常是输入^C) StopIteration 迭代器没有更多的值 FloatingPointError 浮点计算错误 OverflowError 数值运算超出最大限制 ZeroDivisionError 除(或取模)零 AssertionError 断言语句失败 IOError 输入/输出操作失败 IndexError 序列中没有此索引 KeyError 映射中没有这个键 NameError 未声明/初始化对象 (没有属性) UnboundLocalError 访问未初始化的本地变量 SyntaxError Python 语法错误 TypeError 对类型无效的操作 ValueError 传入无效的参数 列表和元组列表=list(迭代器) 使用+可连接两个列表,*可重复列表并链接 列表(字符串)切片s2=s1[start,end] 列表方法和函数 介绍 s.append(item) 添加到末尾 s.index(item) 查找第一个item s.insert(idex,item) 从index插入 s.sort() 排序 s.remove(item) 移除第一个item元素 s.reverse() 反转列表 del(item) 删除item出的元素 列表元组相互转换12列表=list(元组)元组=tuple(列表) 字符串字符串迭代12for value in str: sth... 字符串方法 函数 介绍 in , not in 测试字符串 capitalize() 将字符串的第一个字符转换为大写 count(str, begin= 0,end=len(string)) 返回指定范围内 str 出现的次数 find(str, beg=0, end=len(string)) 查找str 是否包含在字符串中，返回开始的索引值，否则返回-1 rfind(str, beg=0,end=len(string)) 从右开始查找 isalnum() 所有字符都是字母或数字 isalpha() 所有字符都是字母或中文字 isdigit() 如果只有数字 isspace() 如果字符串中只包含空白 lower() 转换字符串中所有大写字符为小写 upper() 转换字符串中的小写字母为大写 lstrip() 截掉字符串左边的空格或指定字符 replace(old, new) 将字符串中的old替换成new strip(char) 删除前面和尾部的字符char endawith(),startswith() 检测是否以字符串开头和结尾 split() 分割字符串,返回列表 字典和集合字典 (映射) 字典方法 介绍 clear() 清空字典 get() 获取对应键的值,不会抛出异常 items() 返回将键和值组成的元组 keys() 返回键组成的元组 values() 返回值组成的元组 pop() 将键的键值删除 集合12345678910111213s=set() #建立s.add() #添加s.len() #求数量s.remove() #删除s.clear() #清除s.copy() #拷贝set1|set2 #交集set1&amp;set2 #并集set1-set2 #差集(在s1不在s2)set1^set2 #对称差集set1&gt;=set2 #超集set1&lt;=set2 #子集 序列化快速将对象储存在文件中 12345678910import pickle# 写sth=&#123;&#125; #可以是字典,集合,列表,元组,字符串,整数和浮点数file_ptr=open(&#x27;xxx.bat&#x27;,&#x27;wb&#x27;)pickle.dump(sth,file_ptr)file_ptr.close()# 读file_ptr2=open(&#x27;xxx2.bat&#x27;,&#x27;rb&#x27;)sth=pickle.load(file_ptr2) #解析出一个对象file_ptr2.close()","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.fldpmpang.website/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.fldpmpang.website/tags/python/"}]},{"title":"Windows Terminal配置和美化","slug":"还在用cmd","date":"2020-10-03T09:22:49.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"202010033156/","link":"","permalink":"https://www.fldpmpang.website/202010033156/","excerpt":"","text":"还在视窗系统上用傻傻的cmd或丑丑的Power shell? 希望命令行可以分块分标签显示? 想要想Linux下终端一样好看? 现在介绍— Windows Terminal官方中文文档写的非常详细 Windows Terminal（Windows终端）是微软公司于西雅图开幕的Build 2019大会上所公布的面向Windows10的新命令行程序。用户可以通过Microsoft应用商店安装，或从Github下载源码自行编译安装。这一程序把目前Windows上的PowerShell、CMD以及Windows Linux子系统（WSL）三大环境实现了统一。 –Wikipedia 获取与安装我们可以非常容易的在win10应用商店中下载,或在Github上下载比较简单 功能配置按Ctrl+ ,或在 中打开进行设置的json文件(建议选用带有高亮的编辑器打开)还是建议看官方文档说的对比较详细 全局设置下面是一些有用全局设置太长不看版 12345678&quot;theme&quot;: &quot;dark&quot;, //标签栏颜色 可选&quot;system&quot;、&quot;dark&quot;、&quot;light&quot;&quot;copyOnSelect&quot;: false, //选定即复制 关闭&quot;copyFormatting&quot;: false, //复制格式 关闭&quot;confirmCloseAllTabs&quot;: false, //有多个标签页打开是退出确认 关闭(默认打开)&quot;tabWidthMode&quot;: &quot;titleLength&quot;, //选项卡宽度模式 &quot;&quot;titleLength&quot;为固定宽度&quot;startOnUserLogin&quot;: true, //开机启动&quot;launchMode&quot;: &quot;default&quot;, //启动是窗口大小 &quot;default&quot;、&quot;maximized&quot;&quot;showTabsInTitlebar&quot;: true, //隐藏标题栏 主题配置在setting.json文件中schemes数组中配置颜色 默认的有 Campbell Campbell Powershell Vintage One Half Dark One Half Light Solarized Dark Solarized Light Tango Dark Tango Light 个人用的是自己配置的Atom One Dark主题 123456789101112131415161718192021&#123; &quot;name&quot;: &quot;Atom One Dark&quot;, &quot;black&quot;: &quot;#000000&quot;, &quot;red&quot;: &quot;#fd5ff1&quot;, &quot;green&quot;: &quot;#87c38a&quot;, &quot;yellow&quot;: &quot;#ffd7b1&quot;, &quot;blue&quot;: &quot;#85befd&quot;, &quot;purple&quot;: &quot;#b9b6fc&quot;, &quot;cyan&quot;: &quot;#85befd&quot;, &quot;white&quot;: &quot;#e0e0e0&quot;, &quot;brightBlack&quot;: &quot;#000000&quot;, &quot;brightRed&quot;: &quot;#fd5ff1&quot;, &quot;brightGreen&quot;: &quot;#94fa36&quot;, &quot;brightYellow&quot;: &quot;#f5ffa8&quot;, &quot;brightBlue&quot;: &quot;#96cbfe&quot;, &quot;brightPurple&quot;: &quot;#b9b6fc&quot;, &quot;brightCyan&quot;: &quot;#85befd&quot;, &quot;brightWhite&quot;: &quot;#e0e0e0&quot;, &quot;background&quot;: &quot;#161719&quot;, &quot;foreground&quot;: &quot;#c5c8c6&quot;&#125; 其他的主题可在Github挑选并下载颜色配置代码 最后在&quot;profiles&quot; - &quot;defaults&quot; - &quot;colorScheme&quot; 中添加主题的名称 美化在 &quot;defaults&quot; 中,可以修改 12345678910111213&#123; &quot;acrylicOpacity&quot;: 0.8, //背景透明度 &quot;useAcrylic&quot;: true, //启用毛玻璃 &quot;backgroundImage&quot;: &quot;xxx.jpg&quot;, //背景图片 &quot;backgroundImageOpacity&quot;: 0.4, //图片透明度 &quot;backgroundImageStretchMode&quot;: &quot;fill&quot;, //填充模式 &quot;fontFace&quot;: &quot;Courier New&quot;, //字体 &quot;fontSize&quot;: 16, //字号 &quot;colorScheme&quot;: &quot;Atom One Dark&quot;, //主题 &quot;cursorColor&quot;: &quot;#FFFFFF&quot;, //光标颜色 &quot;cursorShape&quot;: &quot;bar&quot;, //光标形状&#125;, 功能配置在&quot;list&quot; 中添加功能 例如 123456789&#123; // Make changes here to the powershell.exe profile. &quot;guid&quot;: &quot;&quot;, &quot;name&quot;: &quot;&quot;, //显示的名称 &quot;commandline&quot;: &quot;&quot;, //这是加载shell文件地址 &quot;hidden&quot;: false, //是否隐藏 &quot;inon&quot;: &quot;&quot; //图标&#125;, guid 是全局唯一标识符（GUID，Globally Unique Identifier）是一种由算法生成的二进制长度为128位的数字标识符。GUID主要用于在拥有多个节点、多台计算机的网络或系统中。在理想情况下，任何计算机和计算机集群都不会生成两个相同的GUID。随机生成两个相同GUID的可能性是非常小的，但并不为0。所以，用于生成GUID的算法通常都加入了非随机的参数（如时间），以保证这种重复的情况不会发生。 可以在这里生产一个guid 当然,不同种类的选项卡可以分别配置例如,选项与上文一样 123456789101112&#123; &quot;guid&quot;: &quot;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;&quot;, &quot;backgroundImage&quot;: &quot;&quot;, &quot;acrylicOpacity&quot;: 0.8, &quot;useAcrylic&quot;: true, &quot;backgroundImage&quot;: &quot;&quot;, &quot;backgroundImageOpacity&quot;: 0.4, &quot;fontFace&quot;: &quot;&quot;, &quot;commandline&quot;: &quot;&quot;&#125;, 最后就花里胡哨 使用基本功能与cmd一样窗口功能想要进阶可在官方文档中查看 关于在power shell脚本无法执行的问题首次在计算机上启动 Windows PowerShell 时，现用执行策略很可能是 Restricted（默认设置）Restricted 策略不允许任何脚本运行 若要了解计算机上的现用执行策略,键入： 1get-executionpolicy 若要在本地计算机上运行未签名脚本和来自其他用户的签名脚本，可以使用以下命令将计算机上的，执行策略更改为 RemoteSigned： 1set-executionpolicy remotesigned","categories":[{"name":"生产力工具","slug":"生产力工具","permalink":"https://www.fldpmpang.website/categories/%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://www.fldpmpang.website/tags/Windows/"},{"name":"Bash","slug":"Bash","permalink":"https://www.fldpmpang.website/tags/Bash/"}]},{"title":"2020年秋杂谈","slug":"生存-社会-道德","date":"2020-09-26T04:05:50.000Z","updated":"2021-05-11T01:59:57.975Z","comments":true,"path":"202009263681/","link":"","permalink":"https://www.fldpmpang.website/202009263681/","excerpt":"","text":"入学军训“一人犯错全班受罚”的本质是 转移阶级矛盾,教官以一句“因为你们是一个集体”证明命令合法性。表面上看这似乎是在培养学生们的团结精神和集体荣誉感，实际上却是个古代连坐一样的惩罚手段。更加高明的是，通过合理化对非责任人的惩罚，巧妙地将矛盾由他与学生之间转移到了学生内部。久而久之，学生会认为他们之所以受到体罚，是因为部分同学不听话，而忽略了体罚的施加者是教官。这样一来，统治阶级与被统治阶级之间的矛盾就被巧妙地转移到了被统治阶级的内部，一方面加强了管理的线效率，另一方面更加减少了反抗的可能. 社会 现在不是 2%的人想掌握 98%的财富，而是 2%的人想掌握 120%的财富，剩下的 98%负债 20% 金句 原则上自愿，就是必须；原则上必须，就是自愿；原则上可以，就是不行；原则上不行，就是可以。 人类史就是下层绝育和天灾绝户，中上层不停下沉的历史…… 如果你感觉一个人处处都比你懂得多，那么他背后肯定在一直想办法提升自己。","categories":[{"name":"杂感","slug":"杂感","permalink":"https://www.fldpmpang.website/categories/%E6%9D%82%E6%84%9F/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://www.fldpmpang.website/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"找回阳间码力day3-递归与递推复健","slug":"找回阳间码力day3-递推与递归复健","date":"2020-09-12T13:16:33.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"2020091222504/","link":"","permalink":"https://www.fldpmpang.website/2020091222504/","excerpt":"","text":"2020.08.37还是太菜了 P1044 栈两个方法,DP,和$Catalan$数 1.DP 方法设栈内有$i$个数,$j$表示未进栈的数字个数,,$f(i,j)$为当前状态的选择数,则有递推式$$ f(i,j)=f(i+1,j-i)+f(i-1,j) (i&gt;0) $$$$ f(i,j)=f(i+1,j-1) (i=0) $$$f(i+1,j-i) ,f(i-1,j) $ 分别对应 入栈和出栈边界也不难想到 $f(i,0)=1$ (仅栈内有数,此时只能出栈) 代码如下123456789101112131415using namespace std;int f[20][20],n;int main()&#123; cin&gt;&gt;n; for(int i=0;i&lt;=n;i++) f[i][0]=1; for(int j=1;j&lt;=n;j++)&#123; for(int i=0;i&lt;=n;i++)&#123; if(i==0) f[i][j]=f[i+1][j-1]; else f[i][j]=f[i-1][j]+f[i+1][j-1]; &#125; &#125; cout&lt;&lt;f[0][n]; return 0;&#125; 2.$Catalan$数我还不会$Catalan$数设最后一个出栈的数为 x,则比 x 小的有 x-1 个,比 x 大的有 n-x 个,设 f[i]为选择数,则所有可能性为 f[x-1]*f[n-x],其中 f[0]=f[1]=1; 另外，由于 x 有 n 个取值，所以 ans = f[0]f[n-1] + f[1]f[n-2] + … + f[n-1]_f[0];满足$Catalan$数的递推式,则我们使用其常见公式$$ Hn=H{n-1}_(4n-2)/n+1 $$累加即可 P1928 外星密码题意很明显要递归处理被压缩的字符串 如何输入处理是个大问题,但对 cin() 的特性规避了这一问题 递归函数代码123456789101112131415string slove(void)&#123; string ans; //结果 char c; while(cin&gt;&gt;c)&#123; if(c==&#x27;[&#x27;)&#123; //子串开始 int x; cin&gt;&gt;x; //直接输入压缩次数,避免对数字位数的讨论 string t=slove(); for(int i=0;i&lt;x;i++) ans+=t; //加x次字串 &#125; else if(c==&#x27;]&#x27;) return ans; //子串结束 else ans+=c; &#125; return ans;&#125; 最后调用$slove()$;即可","categories":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"https://www.fldpmpang.website/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.fldpmpang.website/tags/%E7%AE%97%E6%B3%95/"},{"name":"题解","slug":"题解","permalink":"https://www.fldpmpang.website/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"找回阳间码力day2-枚举与暴力复健","slug":"找回阳间码力day2-枚举复健","date":"2020-09-11T13:16:33.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"2020091157435/","link":"","permalink":"https://www.fldpmpang.website/2020091157435/","excerpt":"","text":"2020.08.26 发现自己不是考试的时候，不想写暴力，然后考试的时候就发现自己暴力都不会 P2241 统计方形（数据加强版）数据加强后,原先直接模拟的方法会超时,需要用一点统计知识 对于一个长方形,可以枚举他的长和宽来判断形状 对于一个方向 大长方形边长减小长方形边长加一得这个长宽的长方形再这一方向上可以摆放的数量,最后用乘法原理相乘 具体代码1234567891011121314int main()&#123; int n,m; long long ans=0,t=0,h=0; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=m;j++)&#123; ans=(n-i+1)*(m-j+1); //比较容易就推出来了 if(j==i) t+=ans; //正方形 else h+=ans; //长方形 &#125; &#125; cout&lt;&lt;t&lt;&lt;&quot; &quot;&lt;&lt;h&lt;&lt;endl; return 0;&#125; P1157 组合的输出搜索题,输出组合我使用了回溯(DFS?)的方法 搜索函数123456789101112131415161718void dfs(int num)&#123; if(num&gt;r)&#123; //完成组合 for(int i=1;i&lt;=r;i++) printf(&quot;%3d&quot;,ans[i]); putchar(&#x27;\\n&#x27;); return ; &#125; for(int i=ans[num-1]+1;i&lt;=n;i++) &#123; //ans[num-1]+1 可保证数组必定按字典序排列 if(!use[i]) &#123; ans[num]=i; use[i]=1; //该数被使用 dfs(num+1); //递归调用 use[i]=0; //回溯 &#125; &#125; return ;&#125; 最后调用 dfs(1) 即可; P3799 妖梦拼木棒因为要用 4 根木棒,所以必有两个木棒长度相等 设木棒分别为 $ a,b,c,d $则有$ a=b=c+d $即可分别枚举$ a(b) $ ,$ c $ 对于某个边长的正三角形,两根相同长度的木棒的选法为$ C(n,2) $个,其余两根木棒若长度相同选法为$ C(n,2) $,若不相同选法是$ n_1 * n_2 $,根据乘法原理得该边长的三角形的选法 最后累加再取余即可 代码如下1234567891011121314151617181920212223242526272829303132const LL mod=1e9+7;LL t,maxt=-1,ans=0;int n;LL tag[10005]; //使用一个桶储存相同长度的木棒的个数int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;t; ++tag[t]; maxt=max(maxt,t); //找最长,减少木棒长度枚举量 &#125; for(int x=2;x&lt;=maxt;x++)&#123; if(tag[x]&gt;=2)&#123; //有两条以上相同长度的木棒 LL num= (tag[x]*(tag[x]-1)/2) %mod; for(int i=1;i&lt;=x/2;i++)&#123; if( tag[i]&amp;&amp;tag[x-i] ) &#123; if(2*i==x) &#123;//两条长度一样 ans+=num*(tag[i]*(tag[i]-1)/2); ans%=mod; //C(n,2)=n*(n-1)/2 &#125; else &#123; ans+=num*tag[i]*tag[x-i]; ans%=mod; &#125; &#125; &#125; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;","categories":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"https://www.fldpmpang.website/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.fldpmpang.website/tags/%E7%AE%97%E6%B3%95/"},{"name":"题解","slug":"题解","permalink":"https://www.fldpmpang.website/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"使用Hexo搭建个人博客-美化和功能","slug":"Hexo搭建博客(下)","date":"2020-09-11T02:16:33.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"202009113538/","link":"","permalink":"https://www.fldpmpang.website/202009113538/","excerpt":"","text":"这篇不同于上篇,博客建设内容多而杂,内容多以指引方向为主,具体的细节可在我补充的链接中查看 主题你能忍受单调低效Hexo的默认主题吗? 主题的选择支持Hexo的主题很多,你甚至可以在 知乎上找 一般主题介绍里都写了安装方法 你可以使用Git clone到网站文件夹下的themes文件下,也可以下载后手动复制(直接下载时要注意把文件夹名字改成主题名字) Fluid这是我博客目前在用的主题(截至至2020.11) Fluid这个主题,在我看来还是比较好看的具体设置细节,可以看Fluid文档 NexT这是一个比较简洁的主题官方网站 这款主题的Pisces版非常好看 美化与特效这里可写的东西很多,比如 鼠标点击特效 网站标题特效 看板娘 背景特效 也需要一定的前端知识,这里我直接给出我建设网站时设置参考的网站链接 看板娘,点击特效 点击特效,背景特效 每日一言 等等….. 博客评论系统我博客使用的是Valine博客评论系统这是一款基于LeanCloud的快速、简洁且高效的无后端评论系统 valine官网 通用搭建方法 对于Fluid的主题系统来说,主题配置文件已经配置好评论部分可在fluid_config.yml(使用”覆盖配置”直接修改)或主题文件夹中的’_config.yml’文件的comments字段(配置文件写的很清楚)将LeanCloud的AppID和Appkey添加即可 复杂数学公式支持由于Hexo博客系统本身的公式渲染器不支持比较高级的$\\LaTeX$公式 所以先把Hexo的公式渲染器卸载 1npm uninstall hexo-renderer-marked --save 我是用的是支持比较多$\\LaTeX$语法的MathJax渲染器 1npm install hexo-renderer-kramed --save 在相应的博客主题设置里更换数学公式渲染器 之后hexo clean更新博客缓存即可 部署在Github先建立一个仓库在设置中打开GitHub Pages服务 之后的工作与部署在Gitee上大同小异 使用自定义域名在cource下新建一个CNAME文件里面加上你个域名 加速网站访问todo 补充链接能看到这里已经不是博客小白了,可以成为一个网站开发者了,如果你还要继续学习,可以看下面的内容 w3school网站建设 关于网站SEO","categories":[{"name":"网站建设","slug":"网站建设","permalink":"https://www.fldpmpang.website/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://www.fldpmpang.website/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"教程","slug":"教程","permalink":"https://www.fldpmpang.website/tags/%E6%95%99%E7%A8%8B/"},{"name":"前端","slug":"前端","permalink":"https://www.fldpmpang.website/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.fldpmpang.website/tags/JavaScript/"}]},{"title":"使用Hexo搭建个人博客-部署与配置","slug":"Hexo搭建博客(上)","date":"2020-09-10T13:16:33.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"2020091018682/","link":"","permalink":"https://www.fldpmpang.website/2020091018682/","excerpt":"","text":"成品效果前言最近发现 wordpress 不能很好的同时支持 markdown 和 Latex 数学公式,国内的服务器又在备案和有其他用途,于是就选择了支持原生 Markdown 的 Hexo 博客系统 但目前(2020.12)码云不支持使用自己的域名(下篇会将博客部署到Github,这样就可以使用自定义域名了) 其实就是闲的蛋疼想找点事做 无论干什么也一定要看官方文档啊 Hexo 中文文档 安装运行环境(个人搭建时使用的 win10 系统) 关于安装运行环境,官方文档上有针对不同系统的详细说明,不再赘述 如果是第一次接触到 Git 可以看一下 菜鸟驿站的 Git 简明指南明白几个基础命令就行 建站参考官方文档安装(不贴安装命令是因为安装命令可能随时更换,但官方文档必定是最准确的) 使用命令行进入安装目录的上一级目录,新建一个空文件夹 接下来执行 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 来进行网站的初始化,其中 ““是新建的文件夹的名字 对于这种警告 可以完全忽略,因为这是 Node.js 在 mac 系统上的 bug(有兴趣可以自行百度) 这样你的网站就建好了(雾),来访问一下看看吧:执行命令 123hexo clean &#x2F;&#x2F;清除缓存与静态文件hexo generate &#x2F;&#x2F;生成静态文件,可简写为 hexo ghexo server &#x2F;&#x2F;启动本地网站服务器,可简写为 hexo s 通过命令行的反馈可以看到,本地网站网址为http://localhost:4000 让我们进去看看吧是这个样子: 看完后按 Ctrl+C 退出 详细的 hexo 的命令请参考官方文档 部署只在本地看怎末能行?搭建网站就是为了让更多人看到内容下面开始将网站部署在 Gitee(为什么是 Gitee? 因为 Gitee 在国内访问比 Github 快) 创建仓库登录码云(没有账号的自己注册去!),新建一个仓库,将他命名为你网站的名字(很重要!,命名不同会很麻烦) 在 仓库页-服务-Gitee Pages (需要绑定手机)中打开 Gitee Pages 服务部署分支建议选择 master,部署目录是整个仓库 创建 SSH什么是 SSH?简单说就是对远程登录会话和其他网络服务提供安全性的协议,Git 的 remote操作需要使用 SSH 密钥下面创建一个 ssh 密钥对打开 Git Bash(在开始菜单有) 键入 1ssh-keygen -t rsa -C “your_email@example.com” 邮箱为你注册码云的邮箱其中会让你确认和输入密码,密码可不填(直接按回车) 创建完的 ssh 公钥对会在 用户/.ssh/文件夹中将/.ssh 文件夹中的 “xxx.pub”文件打开,里面的内容就是 ssh 公钥了 打开 码云个人主页-个人设置-安全设置-ssh 公钥里将公钥填上,名字可以随便取 如果没有看懂,可以看码云-SSH 公钥详细的图文教程 因为 Git 是分布式版本控制系统，所以每个机器都必须自报家门：你的名字和 Email 地址（都不会进行验证），这样远程仓库才知道哪次提交是由谁完成的。所以接着设定 git 用户名和邮箱 12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 建议填你注册码云的用户名和邮箱 接下来这一步卡了我蛮长时间的 部署到仓库首先安装一键部署插件 1npm install hexo-deployer-git --save 打开 hexo 博客目录中的 _config.yml 文件找到 deploy: 并增加 1234deploy: type: git repo: 你博客的git地址 branch: master “你博客的 git 地址” 可在仓库页中复制 更多部署参数可在官方文档查看 然后修改默认路径,在 _config.yml 文件修改 url , root: 12url: 仓库地址root: &#x2F; 仓库的名字&#x2F; 这样就可以推送博客辣~ 执行命令 123hexo cleanhexo ghexo depoly &#x2F;&#x2F;部署到网络,可简写为hexo d 接下来更新 Gitee Pages 服务,访问 Gitee Pages 的网站地址 成功部署到了云端 提示由于时静态页面,在调试时,一定要及时清理浏览器缓存和更新 Gitee Pages或使用浏览器的 Devtools 禁用该网站的缓存进行网站实时更新 如果网站格式丢失如果部署到云端是网站格式丢失但本地部署无问题 在网页中打开调试模式 (F12) 发现报了很多错原来是找不到 js 和 css 文件,无法渲染网页 重新修改 url, root注意 root 一定要是仓库的名字 仓库介绍与开源声明当你回到码云仓库页的时候, 我的项目介绍呢? 我的开源许可证呢? 原来是 hexo 部署会把整个仓库(的分支)清空,所以 README.md 和 LICENSE被删掉了我们应该将 README.md 和 LICENSE 放到网站目录的 /soucre 目录下 但是,众所周知:Hexo 页面和文章使用 MarkDown 语言撰写,当执行 1hexo g 命令时,Markdown 页面会被”编译”成使用 HTML 语言的标准网页(标准说法是:生成静态网页) 但码云只认 README.md,我们可以通过对网站文件夹中的 _config.yml 进行修改将 skip_render: 选项后加入 README.md 来跳过对 README.md 的”编译” 问题解决了 网站信息自定义如何让这个网站看起来像你自己的?首先要更改网站的信息,包括 网站主/副标题 网站介绍 可在网站目录下的_config.yml 文件中 site 栏修改 使用写作其实很简单,你可以使用官方文档也可以在source/_posts/下直接新建一个 markdown 文件,只不过文章的Front-matter需要你自己添加 Front-matterFront-matter就是一个可以指定文章详细内容的标签 常用的有: title 文章标题 date 文章创建日期 tags 文章标签 categories 文章分类 比如本篇文章曾经的 Front-matter 1234567891011---title: 使用Hexo搭建博客(上)-建站,配置与部署date: 2020-09-09 21:16:33categories: 网站建设tags:- 网站- 博客- 教程--- 结尾 不想看 Hexo 的默认主题? 在网站中加入评论区? 在网站中加入炫酷特效? 好康的看板娘? 不想使用又长又臭的码云提供的域名? 欢迎查看 使用 Hexo 搭建博客(下)-美化,功能与杂项","categories":[{"name":"网站建设","slug":"网站建设","permalink":"https://www.fldpmpang.website/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}],"tags":[{"name":"网站","slug":"网站","permalink":"https://www.fldpmpang.website/tags/%E7%BD%91%E7%AB%99/"},{"name":"博客","slug":"博客","permalink":"https://www.fldpmpang.website/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"教程","slug":"教程","permalink":"https://www.fldpmpang.website/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"找回阳间码力day1-模拟复健","slug":"找回阳间码力day1-模拟复健","date":"2020-09-09T13:16:33.000Z","updated":"2021-05-06T10:05:23.048Z","comments":true,"path":"2020090927485/","link":"","permalink":"https://www.fldpmpang.website/2020090927485/","excerpt":"","text":"最近才开始复健OI,我太懒了qwq 2020.08.25 模拟题复健嘛,先找回感觉再说,模拟题不至于因为算法遗忘而卡思路 P1563 玩具谜题先看题,大意是在一个环上按指令移动,输出最终结果 直接模拟即可 注意到,对于任意一人,朝内向左移动与朝外向右移动是等效的(或反之); 这方便了判断最终移向 要注意对环的边界的处理,取余保持光标在环上 预定义123456int m,n,rl,num,tmp=0; //rl是向左/右,num是步数,tep是当前移动到的人struct man&#123; int tow; //朝内/外 string name; //职业&#125;peo[100005]; 核心代码123456789101112131415161718192021int main()&#123; ios::sync_with_stdio(0); cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;peo[i].tow&gt;&gt;peo[i].name; &#125; for(int i=0;i&lt;m;i++) &#123; cin&gt;&gt;rl&gt;&gt;num; if(rl+peo[tmp].tow ==1 ) &#123; //高效的判断最终移向,该移向为逆时针 tmp+=num; tmp%=n; &#125; else &#123; //+n防止取模出负报错 tmp+=n-num; tmp%=n; &#125; &#125; cout&lt;&lt;peo[tmp].name&lt;&lt;endl; return 0;&#125; 水题 P1518 两只塔姆沃斯牛人和牛一个移动方法,因此可以共用代码,模拟人和牛的运动,一开始我还以为是到搜索题的说 如何判断数据无解?一个简单的方法是:模拟足够多的次数,若为相遇则无解,此时程序应运行近似1s,经测试,模拟500w次较为适合 预定义1234567891011char map[12][12];struct Place&#123; int x,y,tow=0; //坐标和朝向&#125;f[2]; //f[0]是人 f[1]是牛int t=0,dx[4]=&#123;0,1,0,-1&#125;,dy[4]=&#123;-1,0,1,0&#125;;//dx,dy为四个移动方向,t为过去时间bool cheak(int x,int y)&#123; if(x&lt;0 || x&gt;9 || y&lt;0 || y&gt;9 || map[x][y]==&#x27;*&#x27;) return 0; else return 1;&#125;//检查是否遇到边界和障碍物 核心代码12345678910111213141516171819202122232425262728int main()&#123; ios::sync_with_stdio(0); for(int i=0;i&lt;10;i++) for(int j=0;j&lt;10;j++) &#123;//确定人和牛 cin&gt;&gt;map[j][i]; if(map[j][i]==&#x27;F&#x27;) &#123; f[0].x=j; f[0].y=i; &#125; if(map[j][i]==&#x27;C&#x27;) &#123; f[1].x=j; f[1].y=i; &#125; &#125; while(t&lt;=5000000)&#123; /* cout&lt;&lt;f[0].x&lt;&lt;&#x27; &#x27;&lt;&lt;f[0].y&lt;&lt;&#x27;\\n&#x27;; */ if(f[0].x==f[1].x &amp;&amp; f[0].y==f[1].y)&#123; cout&lt;&lt;t&lt;&lt;endl; return 0; &#125; //相遇 for(int i=0;i&lt;2;i++)&#123; if(cheak(f[i].x+dx[f[i].tow], f[i].y+dy[f[i].tow]) )&#123; f[i].x+=dx[f[i].tow]; f[i].y+=dy[f[i].tow]; &#125;//向前移动 else f[i].tow=( f[i].tow+1 )%4; //顺时针转向 &#125; ++t; &#125; cout &lt;&lt;&#x27;0&#x27;&lt;&lt;endl; return 0;&#125; P4924 魔法少女小Scarlet这道题还是卡了我蛮长时间的 题目大意是在数字矩阵中将某个矩阵中的数字位置旋转,难点据在于如何确定旋转关系 如图(样例第一次操作):| 1 | 2| 3| 4| 5 || :—: | :—: | :—: | :—: | :—: || 6 |7 | 8 | 9 | 10|| 11 |12 |13 |14 |15 || 16 | 17 | 18 | 19 | 20 || 21 | 22 | 23 | 24 | 25 | 变为 11 6 1 4 5 12 7 2 9 10 13 8 3 14 15 16 17 18 19 20 21 22 23 24 25 设被旋转矩形的最坐上角坐标为(1,1) 某个数字坐标为(i,j) 则顺时针旋转后的坐标为(j,n-i+1) (n-i-1代表 倒数第i列)推出过程:|(1,1)| (i,j) | . | . | . || :—: | :—: | :—: | :—: | :—: || . | . | .| . | (j,n-i+1)|| . | . | . | .| . || . | . | .| .| . || .| . | . | . | . | 对于逆时针同理 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041int n,m,x,y,r,z,a=0;int ans[505][505],b[505][505];//b为复制数组int main()&#123; ios::sync_with_stdio(0); cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) ans[i][j]= (++a); 生成数字矩阵 while(m--) &#123; cin&gt;&gt;x&gt;&gt;y&gt;&gt;r&gt;&gt;z; int l=2*r+1,x0=x-r-1,y0=y-r-1; //确定(1,1) if (z)&#123;//逆时针 for(int i=1;i&lt;=l;i++) for(int j=1;j&lt;=l;j++)&#123; b[l-j+1][i]=ans[i+x0][j+y0]; &#125; // 第i行第j个 变成倒数第j行第i个 (i,j)=&gt;(n-j+1,i) for(int i=1;i&lt;=l;i++) for(int j=1;j&lt;=l;j++)&#123; ans[i+x0][j+y0]=b[i][j]; &#125;//复制回原数组 &#125; else &#123; //顺时针 for(int i=1;i&lt;=l;i++) for(int j=1;j&lt;=l;j++)&#123; // 第i行第j个 变成第j行倒数第i个 (i,j)=&gt;(j,n-i+1) b[j][l-i+1]=ans[i+x0][j+y0]; &#125; for(int i=1;i&lt;=l;i++) for(int j=1;j&lt;=l;j++)&#123; ans[i+x0][j+y0]=b[i][j]; &#125; &#125; &#125; for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=n;j++)&#123; cout&lt;&lt;ans[i][j]&lt;&lt;&#x27; &#x27;; &#125; cout&lt;&lt;&#x27;\\n&#x27;; &#125; return 0;&#125;","categories":[{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"https://www.fldpmpang.website/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.fldpmpang.website/tags/%E7%AE%97%E6%B3%95/"},{"name":"题解","slug":"题解","permalink":"https://www.fldpmpang.website/tags/%E9%A2%98%E8%A7%A3/"}]}],"categories":[{"name":"电子电路设计","slug":"电子电路设计","permalink":"https://www.fldpmpang.website/categories/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/"},{"name":"Linux","slug":"Linux","permalink":"https://www.fldpmpang.website/categories/Linux/"},{"name":"算法与数据结构","slug":"算法与数据结构","permalink":"https://www.fldpmpang.website/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"杂感","slug":"杂感","permalink":"https://www.fldpmpang.website/categories/%E6%9D%82%E6%84%9F/"},{"name":"编程语言","slug":"编程语言","permalink":"https://www.fldpmpang.website/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"生产力工具","slug":"生产力工具","permalink":"https://www.fldpmpang.website/categories/%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7/"},{"name":"网站建设","slug":"网站建设","permalink":"https://www.fldpmpang.website/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"}],"tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://www.fldpmpang.website/tags/FPGA/"},{"name":"Vivado","slug":"Vivado","permalink":"https://www.fldpmpang.website/tags/Vivado/"},{"name":"archlinux","slug":"archlinux","permalink":"https://www.fldpmpang.website/tags/archlinux/"},{"name":"显卡驱动","slug":"显卡驱动","permalink":"https://www.fldpmpang.website/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"},{"name":"Xorg","slug":"Xorg","permalink":"https://www.fldpmpang.website/tags/Xorg/"},{"name":"python","slug":"python","permalink":"https://www.fldpmpang.website/tags/python/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://www.fldpmpang.website/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"Verilog","slug":"Verilog","permalink":"https://www.fldpmpang.website/tags/Verilog/"},{"name":"杂谈","slug":"杂谈","permalink":"https://www.fldpmpang.website/tags/%E6%9D%82%E8%B0%88/"},{"name":"Windows","slug":"Windows","permalink":"https://www.fldpmpang.website/tags/Windows/"},{"name":"Bash","slug":"Bash","permalink":"https://www.fldpmpang.website/tags/Bash/"},{"name":"算法","slug":"算法","permalink":"https://www.fldpmpang.website/tags/%E7%AE%97%E6%B3%95/"},{"name":"题解","slug":"题解","permalink":"https://www.fldpmpang.website/tags/%E9%A2%98%E8%A7%A3/"},{"name":"博客","slug":"博客","permalink":"https://www.fldpmpang.website/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"教程","slug":"教程","permalink":"https://www.fldpmpang.website/tags/%E6%95%99%E7%A8%8B/"},{"name":"前端","slug":"前端","permalink":"https://www.fldpmpang.website/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.fldpmpang.website/tags/JavaScript/"},{"name":"网站","slug":"网站","permalink":"https://www.fldpmpang.website/tags/%E7%BD%91%E7%AB%99/"}]}